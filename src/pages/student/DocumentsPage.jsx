import React, { useEffect, useState } from "react";
import axios from "../../api"; // –ø—É—Ç—å –∫ API-–æ–±—ë—Ä—Ç–∫–µ
import "../../styles/student/DocumentPage.css";

const DocumentsPage = () => {
    const [documents, setDocuments] = useState([]);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedType, setSelectedType] = useState("");
    const [file, setFile] = useState(null);
    const [loading, setLoading] = useState(false);

    const documentTypes = [
        "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏",
        "–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç",
        "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç",
        "–°–ø—Ä–∞–≤–∫–∞ —Å –º–µ—Å—Ç–∞ —É—á–µ–±—ã",
    ];

    useEffect(() => {
        fetchDocuments();
    }, []);

    const fetchDocuments = async () => {
        try {
            const response = await axios.get("/student/documents");
            setDocuments(response.data);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:", error);
        }
    };

    const handleFileChange = (e) => {
        setFile(e.target.files[0]);
    };

    const handleUpload = async () => {
        if (!selectedType || !file) {
            alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª.");
            return;
        }

        const formData = new FormData();
        formData.append("documentFile", file);
        formData.append("type", selectedType);

        try {
            setLoading(true);
            await axios.post("/student/documents", formData, {
                headers: {
                    "Content-Type": "multipart/form-data",
                },
            });

            alert("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!");
            setIsModalOpen(false);
            setSelectedType("");
            setFile(null);
            fetchDocuments();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.");
        } finally {
            setLoading(false);
        }
    };

    const getFileUrl = (url) => {
        return url.replace('/storage/documents/documents/', '/storage/documents/');
    };

    return (
        <div className="documents-container">
            <h1 className="documents-title">–ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã</h1>
            <table className="documents-table">
                <thead>
                <tr>
                    <th>‚Ññ</th>
                    <th>–¢–∏–ø</th>
                    <th>–§–∞–π–ª</th>
                    <th>–ì–æ–¥–µ–Ω –¥–æ</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                </tr>
                </thead>
                <tbody>
                {documents.map((doc, index) => (
                    <tr key={doc.id}>
                        <td>{index + 1}</td>
                        <td>{doc.type || "‚Äî"}</td>
                        <td>
                            <a
                                href={getFileUrl(doc.file_url)}
                                target="_blank"
                                rel="noopener noreferrer"
                            >
                                {doc.file_name || "–°–∫–∞—á–∞—Ç—å"}
                            </a>
                        </td>
                        <td>{doc.valid_until || "‚Äî"}</td>
                        <td className={doc.status === "accepted" ? "accepted" : "pending"}>
                            {doc.status || "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"}
                        </td>
                    </tr>
                ))}
                {documents.length === 0 && (
                    <tr>
                        <td colSpan="5">–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</td>
                    </tr>
                )}
                </tbody>
            </table>

            <button className="upload-button" onClick={() => setIsModalOpen(true)}>
                –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π
            </button>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ */}
            {isModalOpen && (
                <div className="modal-container">
                    <div className="modal">
                        <h2>–ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç</h2>
                        <select
                            className="document-select"
                            value={selectedType}
                            onChange={(e) => setSelectedType(e.target.value)}
                        >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞</option>
                            {documentTypes.map((type, index) => (
                                <option key={index} value={type}>
                                    {type}
                                </option>
                            ))}
                        </select>
                        <label className="file-upload">
                            <input type="file" onChange={handleFileChange} />
                            üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª
                        </label>
                        <div className="modal-buttons">
                            <button className="upload-btn" onClick={handleUpload} disabled={loading}>
                                {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ó–∞–≥—Ä—É–∑–∏—Ç—å"}
                            </button>
                            <button className="modal-close" onClick={() => setIsModalOpen(false)}>
                                –û—Ç–º–µ–Ω–∏—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default DocumentsPage;
